// ****************** TcComExampleModel.cpp *************************
// Generated by TE140x-TargetForMatlabSimulink  2.2.1.4
// MATLAB 9.9.0.1718557 (R2020b) Update 6 (win64)
// TwinCAT 3.1.0.0
// TwinCAT Target 2.2.1.4
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************
#include "TcPch.h"
#pragma hdrstop

#include "TcComExampleModel.h"

#ifdef EXT_MODE
#include "TcExtMode.h"
#include "TcExtWork.h"
#endif

#include "ExampleModel.h"

#include "ObjClassFactory.h"
using namespace TcMgSdk;


///////////////////////////////////////////////////////////////////////////////
// Definitions
///////////////////////////////////////////////////////////////////////////////
#ifdef _DEBUG
#define new DEBUG_NEW
#endif
#if TC_BUILD<=4024
DEFINE_THIS_FILE()
#endif

///////////////////////////////////////////////////////////////////////////////
// CTcComExampleModel specific globals
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CTcComExampleModel static members
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CTcComExampleModel implementation
///////////////////////////////////////////////////////////////////////////////
BEGIN_INTERFACE_MAP(CTcComExampleModel)
INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcPersist,ITcPersist)
	INTERFACE_ENTRY(IID_ITComObject,ITComObject)
	INTERFACE_ENTRY(IID_ITcWatchSource,ITcWatchSource)
	INTERFACE_ENTRY(IID_ITcCyclic,ITcCyclic)
	INTERFACE_ENTRY(IID_ITcPostCyclic,ITcPostCyclic)
	INTERFACE_ENTRY(IID_ITcADI,ITcADI)
	INTERFACE_ENTRY(IID_ITcExampleModel,ITcExampleModel)
END_INTERFACE_MAP()

IMPLEMENT_ITCWATCHSOURCE(CTcComExampleModel)

BEGIN_OBJDATAAREA_MAP(CTcComExampleModel)
	OBJDATAAREA_PTR_SIZE( 0, PExampleModel_M->inputs, sizeof(*(PExampleModel_M->inputs)))
	OBJDATAAREA_PTR_SIZE( 1, PExampleModel_M->outputs, sizeof(*(PExampleModel_M->outputs)))
	OBJDATAAREA_PTR_SIZE( 2, PExampleModel_M->blockIO, sizeof(*(PExampleModel_M->blockIO)))
	OBJDATAAREA_PTR_SIZE( 3, PExampleModel_M->contStates, sizeof(*(PExampleModel_M->contStates)))
END_OBJDATAAREA_MAP()

BEGIN_SETOBJPARA_MAP2(CTcComExampleModel,TcMatSim::GeneratedTcCom)
	SETOBJPARA_DATAAREA_MAP()
	SETOBJPARA_VALUE(0x00000001,m_TraceLevelMax)
	SETOBJPARA_VALUE(0x00000002,m_ModuleCaller)
	SETOBJPARA_VALUE(0x00000003,m_CallerVerification)
	SETOBJPARA_VALUE(0x00000004,m_StepSizeAdaptation)
	SETOBJPARA_VALUE(0x00000005,m_ExecutionSequence)
	SETOBJPARA_VALUE(0x00000006,m_Execute)
	SETOBJPARA_VALUE(0x00000007,m_AccessLockState)
	SETOBJPARA_VALUE(0x00000008,GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init))
	SETOBJPARA_VALUE(0x00000009,GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update))
	SETOBJPARA_VALUE_DENIED(0x0000000a,m_ModuleBuildInfo)
	SETOBJPARA_VALUE_DENIED(0x0000000b,m_Initialized)
	SETOBJPARA_VALUE_DENIED(0x0000000c,rtmGetT(PExampleModel_M))
	SETOBJPARA_VALUE_DENIED(0x0000000d,&m_InitException)
	SETOBJPARA_VALUE_DENIED(0x0000000e,&m_ContextInfo[0].Execution.CycleCount)
	SETOBJPARA_VALUE_DENIED(0x0000000f,&m_ContextInfo[0].Execution.ExceptionCount)
	SETOBJPARA_VALUE_DENIED(0x00000010,&m_ContextInfo[0].Execution.ActException)
END_SETOBJPARA_MAP2(TcMatSim::GeneratedTcCom)

BEGIN_GETOBJPARA_MAP2(CTcComExampleModel,TcMatSim::GeneratedTcCom)
	GETOBJPARA_DATAAREA_MAP()
	GETOBJPARA_VALUE(0x00000001,m_TraceLevelMax)
	GETOBJPARA_VALUE(0x00000002,m_ModuleCaller)
	GETOBJPARA_VALUE(0x00000003,m_CallerVerification)
	GETOBJPARA_VALUE(0x00000004,m_StepSizeAdaptation)
	GETOBJPARA_VALUE(0x00000005,m_ExecutionSequence)
	GETOBJPARA_VALUE(0x00000006,m_Execute)
	GETOBJPARA_VALUE(0x00000007,m_AccessLockState)
	GETOBJPARA_VALUE(0x00000008,GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init))
	GETOBJPARA_VALUE(0x00000009,GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update))
	GETOBJPARA_VALUE(0x0000000a,m_ModuleBuildInfo)
	GETOBJPARA_VALUE(0x0000000b,m_Initialized)
	GETOBJPARA_VALUE_LOCK(0x0000000c, rtmGetT(PExampleModel_M), 0, VarAccess(Access::None,Access::Read))
	GETOBJPARA_PTR_SIZE(0x0000000d,&m_InitException,sizeof(m_InitException))
	GETOBJPARA_PTR_SIZE(0x0000000e,&m_ContextInfo[0].Execution.CycleCount,sizeof(m_ContextInfo[0].Execution.CycleCount))
	GETOBJPARA_PTR_SIZE(0x0000000f,&m_ContextInfo[0].Execution.ExceptionCount,sizeof(m_ContextInfo[0].Execution.ExceptionCount))
	GETOBJPARA_PTR_SIZE(0x00000010,&m_ContextInfo[0].Execution.ActException,sizeof(m_ContextInfo[0].Execution.ActException))
END_GETOBJPARA_MAP2(TcMatSim::GeneratedTcCom)

BEGIN_OBJPARAWATCH_MAP2(CTcComExampleModel)
	OBJPARAWATCH_DATAAREA_MAP()
	OBJPARAWATCH_VALUE(0x00000001,m_TraceLevelMax)
	OBJPARAWATCH_VALUE(0x00000002,m_ModuleCaller)
	OBJPARAWATCH_VALUE(0x00000003,m_CallerVerification)
	OBJPARAWATCH_VALUE(0x00000004,m_StepSizeAdaptation)
	OBJPARAWATCH_VALUE(0x00000005,m_ExecutionSequence)
	OBJPARAWATCH_VALUE(0x00000006,m_Execute)
	OBJPARAWATCH_VALUE(0x00000007,m_AccessLockState)
	OBJPARAWATCH_VALUE(0x00000008,GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init))
	OBJPARAWATCH_VALUE(0x00000009,GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update))
	OBJPARAWATCH_VALUE(0x0000000a,m_ModuleBuildInfo)
	OBJPARAWATCH_VALUE(0x0000000b,m_Initialized)
	OBJPARAWATCH_PTR_SIZE(0x0000000d,&m_InitException,sizeof(m_InitException))
	OBJPARAWATCH_PTR_SIZE(0x0000000e,&m_ContextInfo[0].Execution.CycleCount,sizeof(m_ContextInfo[0].Execution.CycleCount))
	OBJPARAWATCH_PTR_SIZE(0x0000000f,&m_ContextInfo[0].Execution.ExceptionCount,sizeof(m_ContextInfo[0].Execution.ExceptionCount))
	OBJPARAWATCH_PTR_SIZE(0x00000010,&m_ContextInfo[0].Execution.ActException,sizeof(m_ContextInfo[0].Execution.ActException))
END_OBJPARAWATCH_MAP2(TcMatSim::GeneratedTcCom)

IMPLEMENT_ITCADI(CTcComExampleModel)

IMPLEMENT_IPERSIST_LIB(CTcComExampleModel,VID_ExampleModel,CID_EXAMPLEMODEL)

// State transition: Init -> PreOp
HRESULT CTcComExampleModel::SetObjStateIP(ITComObjectServer* ipSrv, TComInitDataHdr* pInitData)
{
	HRESULT hr = S_OK;

	hr = SingleInstanceLock(ipSrv, GUID_NULL);
	if (SUCCEEDED(hr))
	{
		m_ContextInfo[0].OriginalTid = 0;
		m_ContextInfo[0].OriginalSampleTime = 0.01;

	}
	if (SUCCEEDED(hr))
	{
		PExampleModel_M = ::ExampleModel();

	}
	if (FAILED(hr))
	{
		SetObjStatePI();
	}
	return hr;
}

// State transition: PreOp -> SafeOp
HRESULT CTcComExampleModel::SetObjStatePS(TComInitDataHdr* pInitData)
{
	HRESULT hr = S_OK;


	if(SUCCEEDED(hr))
	{
		auto fpState = FpControl(FpCtrlSection::Init);
		::ExampleModel_initialize(PExampleModel_M);

		if (SUCCEEDED(hr))
			hr = CheckAndAdaptCycleTimes();
		m_Initialized = SUCCEEDED(hr);
		FpRestore(fpState);
	}

	if (FAILED(hr))
	{
		SetObjStateSP();
	}
	return hr;
}

// State transition: SafeOp -> Op
HRESULT CTcComExampleModel::SetObjStateSO()
{
	HRESULT hr = S_OK;

	if (FAILED(hr))
	{
		SetObjStateOS();
	}
	return hr;
}

// State transition: Op -> SafeOp
HRESULT CTcComExampleModel::SetObjStateOS()
{
	HRESULT hr = S_OK;

	return hr;
}

// State transition: SafeOp -> PreOp
HRESULT CTcComExampleModel::SetObjStateSP()
{
	HRESULT hr = S_OK;

	auto fpState = FpControl(FpCtrlSection::Init);
	FpRestore(fpState);

	m_Initialized = false;

	return hr;
}

// State transition: PreOp -> Init
HRESULT CTcComExampleModel::SetObjStatePI()
{
	HRESULT hr = S_OK;

	auto fpState = FpControl(FpCtrlSection::Init);
	if (PExampleModel_M!=NULL)
	{
		::ExampleModel_terminate(PExampleModel_M);
		PExampleModel_M = NULL;
	}

	FpRestore(fpState);
	SingleInstanceRelease();

	return hr;
}

// Constructor
CTcComExampleModel::CTcComExampleModel() :
	TcMatSim::GeneratedTcCom(1,0,TC_BUILD_MIN)
{
	m_TraceLevelMax = tlInfo;
	m_ModuleCaller = ModuleCaller::CyclicTask;
	m_CallerVerification = CallerVerification::Default;
	m_StepSizeAdaptation = StepSizeAdaptation::RequireMatchingTaskCycleTime;
	m_ExecutionSequence = ExecutionSequence2::UpdateBeforeOutputMapping;
	m_Execute = false;
	m_AccessLockState = TCOM_STATE_OP;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = FpExcptCtrlSet::Prec53_CallerExceptions;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = FpExcptCtrlSet::Prec53_CallerExceptions;
	m_Initialized = 0;

#ifdef _DEBUG
	m_ModuleBuildInfo.Debug = true;
#else
	m_ModuleBuildInfo.Debug = false;
#endif
	m_ModuleBuildInfo.TcBuild = TC_BUILD;
	m_ModuleBuildInfo.TcRevision = TC_REVISION;

}

// Destructor
CTcComExampleModel::~CTcComExampleModel()
{

}

HRESULT TCOMAPI CTcComExampleModel::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{

	if (!m_Execute)
		return S_FALSE;
	if (!m_Initialized)
		return ADS_E_NOTINIT;
	if (m_ExecutionSequence!=TcMgSdk::ExecutionSequence2::UpdateBeforeOutputMapping)
		return S_OK;
	m_ContextInfo[context].ExecutingCyclicCall = true;
	HRESULT hr = Update(ipTask, context);
	m_ContextInfo[context].ExecutingCyclicCall = false;
	return hr;
}

HRESULT TCOMAPI CTcComExampleModel::PostCyclicUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{

	if (!m_Execute)
		return S_FALSE;
	if (!m_Initialized)
		return ADS_E_NOTINIT;
	if (m_ExecutionSequence!=TcMgSdk::ExecutionSequence2::IoAtTaskBegin)
		return S_OK;
	m_ContextInfo[context].ExecutingPostCyclicCall = true;
	HRESULT hr = Update(ipTask, context);
	m_ContextInfo[context].ExecutingPostCyclicCall = false;
	return hr;
}

HRESULT CTcComExampleModel::Update(ITcTask* ipTask, ULONG_PTR context)
{
	HRESULT hr = SynchronizeTasks(context);
	if(SUCCEEDED(hr))
		hr = VerifyCaller(ipTask, context);

	if(SUCCEEDED(hr) && m_ContextInfo[context].Synchronized)
	{
		m_ContextInfo[context].Execution.CycleCount++;
		auto fpState = FpControl(FpCtrlSection::Update);
		TcTry
		{
			hr = EvalMdlErrorStatus(PExampleModel_M->errorStatus,false);
			if (hr == S_OK)
			{
				::ExampleModel_step(PExampleModel_M);
				EvalMdlErrorStatus(PExampleModel_M->errorStatus,true);
			}

		}
		TcExcept(ExceptionFilter(ipTask, GetExceptionInformation(), static_cast<LONG>(context), &m_Execute))
		{
			m_Execute = false;
			m_Initialized = false;
			m_Trace.Log(TcTraceLevel::tlError,"%s: Stopping cyclic execution of model code due to an exception. Module reinitialization is required.", m_objName.str);
		}
		FpRestore(fpState);
	}

	return hr;

}

HRESULT CTcComExampleModel::CheckAndAdaptCycleTimes()
{
	double fCycleTimeMultiplier = 1;
	HRESULT hr = CheckCycleTimes(fCycleTimeMultiplier);
	if (SUCCEEDED(hr) && m_StepSizeAdaptation==TcMgSdk::StepSizeAdaptation::UseTaskCycleTime && fCycleTimeMultiplier != 1)
	{
		PExampleModel_M->solverInfo->fixedStepSize *= fCycleTimeMultiplier;
		(*PExampleModel_M->solverInfo->stepSizePtr) *= fCycleTimeMultiplier;
	}
	return hr;
}

// ITcExampleModel
HRESULT TCOMAPI CTcComExampleModel::ExampleModel_step()
{
	HRESULT hr = S_OK;
	auto fpState = FpControl(FpCtrlSection::Update);

	::ExampleModel_step(PExampleModel_M);


	FpRestore(fpState);
	return hr;
}




HRESULT TCOMAPI Create_CTcComExampleModel (PITCID pIid, PPVOID pipItf)
{
	return Create<CTcComExampleModel>(*pIid, pipItf);
}
